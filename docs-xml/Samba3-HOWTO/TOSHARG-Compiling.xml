<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE chapter PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<chapter id="compiling">
<chapterinfo>
	&author.jelmer;
	&author.jht;
	&author.tridge;
	
	<pubdate> 22 May 2001 </pubdate>
	<pubdate> 18 March 2003 </pubdate>
	<pubdate> June 2005 </pubdate>
</chapterinfo>

<title>How to Compile Samba</title>

<para>
You can obtain the Samba source file from the
<ulink url="http://samba.org/">Samba Web site</ulink>. To obtain a development version, 
you can download Samba from Subversion or using <command>rsync</command>.
</para>

<sect1>
<title>Access Samba Source Code via GIT</title>


<sect2>
<title>Introduction</title>

<para>
<indexterm><primary>Subversion</primary></indexterm>
Samba is developed in an open environment. Developers use
GIT to <quote>checkin</quote> (also known as 
<quote>commit</quote>) new source code.  See the
<ulink noescape="1"
       url="https://wiki.samba.org/index.php/Using_Git_for_Samba_Development">Using
Git for Samba Development page</ulink> in the Samba wiki.
</para>

</sect2>


</sect1>

<sect1>
	<title>Accessing the Samba Sources via rsync and ftp</title>


	<para>
	<indexterm><primary>rsync</primary></indexterm>
	<indexterm><primary>ftp</primary></indexterm>
	<parameter>pserver.samba.org</parameter> also exports unpacked copies of most parts of the Subversion tree
	at the Samba <ulink noescape="1" url="ftp://samba.org/pub/unpacked">unpacked</ulink> location and also
	via anonymous rsync at the Samba <ulink noescape="1"
	url="rsync://samba.org/ftp/unpacked/">rsync</ulink> server location.  I recommend using rsync rather
	than ftp, because rsync is capable of compressing data streams, but it is also more useful than FTP because
	during a partial update it will transfer only the data that is missing plus a small overhead.  See <ulink
	noescape="1" url="http://rsync.samba.org/">the rsync home page</ulink> for more info on rsync.
	</para>

	<para>
	The disadvantage of the unpacked trees is that they do not support automatic
	merging of local changes as GIT does. <command>rsync</command> access is most convenient 
	for an initial install.                      
	</para>
</sect1>

<sect1>
<title>Verifying Samba's PGP Signature</title>

<para>
<indexterm><primary>GPG</primary></indexterm>
<indexterm><primary>PGP</primary></indexterm>
It is strongly recommended that you verify the PGP signature for any source file before
installing it. Even if you're not downloading from a mirror site, verifying PGP signatures
should be a standard reflex. Many people today use the GNU GPG tool set in place of PGP.
GPG can substitute for PGP.
</para>


<para>
With that said, go ahead and download the following files:
</para>

<para><screen>
&prompt;<userinput>wget http://samba.org/samba/ftp/samba-latest.tar.asc</userinput>
&prompt;<userinput>wget http://samba.org/samba/ftp/samba-latest.tar.gz</userinput>
&prompt;<userinput>wget http://samba.org/samba/ftp/samba-pubkey.asc</userinput>
</screen></para>


<para>
<indexterm><primary>PGP</primary></indexterm>
The first file is the PGP signature for the Samba source file; the other is the Samba public
PGP key itself. Import the public PGP key with:
<screen>
&prompt;<userinput>gpg --import samba-pubkey.asc</userinput>
</screen>
and verify the Samba source code integrity with:
<screen>
&prompt;<userinput>gzip -d samba-latest.tar.gz</userinput>
&prompt;<userinput>gpg --verify samba-latest.tar.asc</userinput>
</screen>
</para>

<para>
If you receive a message like, <quote>Good signature from Samba Distribution Verification Key...,</quote>
then all is well. The warnings about trust relationships can be ignored. An
example of what you would not want to see would be:
<screen>
gpg: BAD signature from <quote>Samba Distribution Verification Key</quote>
</screen>
</para>

</sect1>

<sect1>
	<title>Building the Binaries</title>
	
	<para>
	<indexterm><primary>configure</primary></indexterm>
	To build the binaries, run the program <userinput>./configure
	</userinput> in the top level directory of the source tree. This should automatically
	configure Samba for your operating system. If you have unusual 
	needs, then you may wish to first run:
<screen>
&rootprompt;<userinput>./configure --help</userinput>
</screen>
</para>
	
	<para>
	This will help you to see what special options can be enabled. Now execute
	<userinput>./configure</userinput> with any arguments it might need:
<screen>
&rootprompt;<userinput>./configure <replaceable>[... arguments ...]</replaceable></userinput>
</screen>
	</para>
	
	<para>
	<indexterm><primary>make</primary></indexterm>
	Execute the following create the binaries:
<screen>
&rootprompt; <userinput>make</userinput>
</screen>
	Once it is successfully compiled, you can execute the command shown here to
	install the binaries and manual pages:
<screen>
&rootprompt; <userinput>make install</userinput>
</screen>
	</para>
	
	<sect2>
	<title>Compiling Samba with Active Directory Support</title>
	
	<para>
	In order to compile Samba with ADS support, you need to have installed
	on your system:
	</para>

	<itemizedlist>
	
	    <listitem><para>
		The MIT or Heimdal Kerberos development libraries
	    (either install from the sources or use a package).
		</para></listitem>
	
	    <listitem><para>
		The OpenLDAP development libraries.
		</para></listitem>
	    
	</itemizedlist>

	<para>
	If your Kerberos libraries are in a nonstandard location, then
	remember to add the configure option
	<option>--with-krb5=<replaceable>DIR</replaceable></option>.
	</para>

	<para>
	After you run configure, make sure that the 
	<filename>bin/default/include/config.h</filename> it generates contain lines like this:
<programlisting>
#define HAVE_KRB5 1
#define HAVE_LDAP 1
</programlisting>
	</para>

	<para>
	If it does not, configure did not find your KRB5 libraries or
	your LDAP libraries. Look in <filename>bin/config.log</filename> to figure
	out why and fix it.
	</para>

	<sect3>
	<title>Installing the Required Packages for Debian</title>

	<para>On Debian, you need to install the following packages:</para>
	<para>
		<itemizedlist>
			<listitem><para>libkrb5-dev</para></listitem>
			<listitem><para>krb5-user</para></listitem>
		</itemizedlist>
	</para>
	</sect3>

	<sect3>
	<title>Installing the Required Packages for Red Hat Linux</title>

	<para>On Red Hat Linux, this means you should have at least: </para>
	<para>
		<itemizedlist>
			<listitem><para>krb5-workstation (for kinit)</para></listitem>
			<listitem><para>krb5-libs (for linking with)</para></listitem>
			<listitem><para>krb5-devel (because you are compiling from source)</para></listitem>
		</itemizedlist>
	</para>

	<para>in addition to the standard development environment.</para>

	<para>If these files are not installed on your system, you should check the installation
	CDs to find which has them and install the files using your tool of choice. If in doubt
	about what tool to use, refer to the Red Hat Linux documentation.</para>

	</sect3>

	<sect3>
	<title>SuSE Linux Package Requirements</title>

	<para>
	SuSE Linux installs Heimdal packages that may be required to allow you to build
	binary packages. You should verify that the development libraries have been installed on
	your system.
	</para>

	<para>
	SuSE Linux Samba RPMs support Kerberos. Please refer to the documentation for
	your SuSE Linux system for information regarding SuSE Linux specific configuration.
	Additionally, SuSE is very active in the maintenance of Samba packages that provide
	the maximum capabilities that are available. You should consider using SuSE-provided
	packages where they are available.
	</para>

	</sect3>
	
	</sect2>
			  
</sect1>

<sect1 id="startingSamba">
	<title>Starting the &smbd; &nmbd; and &winbindd;</title>


	<para>
	<indexterm><primary>inetd</primary></indexterm>
	You must choose to start &smbd;, &winbindd;  and &nmbd; either as daemons or from
	<application>inetd</application>. Don't try to do both!  Either you can put
	them in <filename> inetd.conf</filename> and have them started on demand by
	<application>inetd</application> or <application>xinetd</application>, or you
	can start them as daemons either from the command-line or in
	<filename>/etc/rc.local</filename>. See the man pages for details on the
	command line options. Take particular care to read the bit about what user
	you need to have to start Samba. In many cases, you must be root.
	</para>

	<para>
	The main advantage of starting &smbd; and &nmbd; using the recommended daemon method
	is that they will respond slightly more quickly to an initial connection request.
	</para>

	<sect2>
	<title>Starting &smbd; as a Daemon</title>
		
	<para>
	<indexterm><primary>daemon</primary></indexterm>
<indexterm><primary>startsmb</primary></indexterm>
	To start the server as a daemon, you should create a script something
	like this one, perhaps calling it <filename>startsmb</filename>.
	</para>

<para><programlisting>
#!/bin/sh
/usr/local/samba/sbin/smbd -D
/usr/local/samba/sbin/winbindd -D
/usr/local/samba/sbin/nmbd -D
</programlisting></para>

	<para>
	Make it executable with <command>chmod +x startsmb</command>.
	</para>

	<para>
	You can then run <command>startsmb</command> by hand or execute
	it from <filename>/etc/rc.local</filename>.
	</para>

	<para>
	To kill it, send a kill signal to the processes &nmbd; and &smbd;.
	</para>

	<note><para>
	If you use the SVR4-style init system, you may like to look at the
	<filename>examples/svr4-startup</filename> script to make Samba fit
	into that system.
	</para></note>

	<sect3>
	<title>Starting Samba for Red Hat Linux</title>
	<para>
	The process for starting Samba will now be outlined. Be sure to configure Samba's &smb.conf;
	file before starting Samba. When configured, start Samba by executing:
<screen>
&rootprompt; service smb start
&rootprompt; service winbind start
</screen>
	These steps will start &nmbd;, &smbd; and &winbindd;.
	</para>

	<para>
	To ensure that these services will be automatically restarted when the system is rebooted
	execute:
<screen>
&rootprompt; chkconfig smb on
&rootprompt; chkconfig winbind on
</screen>
	Samba will be started automatically at every system reboot.
	</para>

	</sect3>

	<sect3>
	<title>Starting Samba for Novell SUSE Linux</title>

	<para>
	Novell SUSE Linux products automatically install all essential Samba components in a default installation.
	Configure your &smb.conf; file, then execute the following to start Samba:
<screen>
&rootprompt; rcnmb start
&rootprompt; rcsmb start
&rootprompt; rcwinbind start
</screen>
	Now execute these commands so that Samba will be started automatically following a system
	reboot:
<screen>
&rootprompt; chkconfig nmb on
&rootprompt; chkconfig smb on
&rootprompt; chkconfig winbind on
</screen>
	The Samba services will now be started automatically following a system reboot.
	</para>

	</sect3>

	</sect2>

</sect1>

</chapter>
